Inkling {
    Program     =  (Stmt)*
    Stmt   =  newline* SimpleStmt newline+ -- simpleStmt
           | newline* IfStmt newline+               -- ifBlock
           | newline* ForLoopnewline+              -- forLoop
           | newline* FuncDec newline+              -- funcDec
           | newline* WhileLoop newline+            -- whileLoop
    Block       =  "{" Stmt+ "}"
    SimpleStmt  =  Call
            |  VarExp "is" Exp                           -- assign
            |  id "is" "Always" Type Exp                 -- constdec
            |  id "is" Type Exp                          -- letdec
            |  "exit"                                    -- break
            |  "display" Exp                             -- print
            |  "gimme" Exp?                              -- return
            |  Exp

    VarExp = VarExp "[" Exp "]"                          -- subscripted
            |  VarExp "." id                             -- field
            | id                                         -- simple

    FuncDec = "function" id "(" Params ")" ReturnType Block        -- function
            |  id "is" "Always" "(" Params ")" ReturnType "=>" Block    -- arrowfunction
    Param       =  id "is" Type (Exp)?
    Params      =  ListOf<Param, ",">
    Args        =  ListOf<Exp, ",">
    ReturnType = "is" (Type | "void")

    Call       =  VarExp "(" Args ")"

    WhileLoop = "while" "(" Exp ")" Block
    IfStmt  =    Exp "?" SimpleStmt ":" SimpleStmt      -- ternary
            |  "if" "(" Exp ")" Block
                ("else if" "(" Exp ")" Block)*
                ("else" Block)?                        -- if

    ForLoop = "for" id "is" Type "in" Exp Block

    Field       =  id ":" Exp
    Exp = Exp1 "and" Exp     --and
        | Exp1 "or" Exp      --or
        | Exp1
    Exp1 = Exp2 relop Exp2    --binary
        | Exp2
    Exp2 = Exp2 addop Exp3    --binary
        | Exp3
    Exp3 = Exp3 mulop Exp4    --binary
        | Exp4
    Exp4 = Exp5 "^" Exp4      --binary
        | Exp5
    Exp5 = prefixOp Exp6      --prefix
        |  Exp6 postfixOp     --postfix
        | Exp6
    Exp6 = "(" Exp ")"        --paren
        | Call
        | boollit
        | txtlit
        | numlit
        | id
        | VarExp
        |  "[" ListOf<Exp, ","> "]"                   -- list
        |   "{" ListOf<Exp, ","> "}"                  -- set
        |  "{" ListOf<KeyValue, ","> "}"              -- dict

    KeyValue = alnum+ ":" Exp
    keyword = ( "while " | "if " | "else " | "is " | "true " | "false " | "for " | "do " | "Always "
    | "display"| "gimme " | "btw: " | "fyi: " | "exit " | "in " | "and " | "or " | "function " | "Num " | "Dict<" | "Bool " | "List<" | "Text " | "Set<")

    Type = (Num | Dict | Bool | List | Text | Set)
    Num     = "Num"
    List    =  "List<" Type ">"
    Set     =  "Set<" Type ">"
    Dict    =  "Dict<" Type "," Type ">"
    Text    =  "Text"
    Bool    = "Bool"
    id          =  ~keyword letter alnum*
    numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    boollit     =  "true" | "false"
    txtlit      =  "\"" (~"\\" ~"\"" ~"\n" ~ "\t" any | escape)* "\""
    escape      =  "\\" ("\"" | "\'" | "n" | "t")?                   --escape
                |  "\\u{" hexDigit+ "}"                       --hexDigit
    mulop       =  "*" | "/" | "%"
    addop       =  "+" | "-"
    relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
    prefixOp    = "--" | "++" | "-" | "!"
    postfixOp   = "++" |"--"
    newline     =  "\n"+
    space      :=  " " | "\t" | comment
    comment     =  "btw:" ~"fyi:" (~"\n" any)*  "\n"      -- singleline
                |  "fyi:" (~":xoxo" any)* ":xoxo"       -- multiline
}

